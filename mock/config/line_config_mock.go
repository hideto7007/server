// Code generated by MockGen. DO NOT EDIT.
// Source: ./config/line_config.go

// Package mock_config is a generated GoMock package.
package mock_config

import (
	reflect "reflect"
	config "server/config"

	gomock "github.com/golang/mock/gomock"
)

// MockLineConfig is a mock of LineConfig interface.
type MockLineConfig struct {
	ctrl     *gomock.Controller
	recorder *MockLineConfigMockRecorder
}

// MockLineConfigMockRecorder is the mock recorder for MockLineConfig.
type MockLineConfigMockRecorder struct {
	mock *MockLineConfig
}

// NewMockLineConfig creates a new mock instance.
func NewMockLineConfig(ctrl *gomock.Controller) *MockLineConfig {
	mock := &MockLineConfig{ctrl: ctrl}
	mock.recorder = &MockLineConfigMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLineConfig) EXPECT() *MockLineConfigMockRecorder {
	return m.recorder
}

// GetEmail mocks base method.
func (m *MockLineConfig) GetEmail(IdToken string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEmail", IdToken)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEmail indicates an expected call of GetEmail.
func (mr *MockLineConfigMockRecorder) GetEmail(IdToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEmail", reflect.TypeOf((*MockLineConfig)(nil).GetEmail), IdToken)
}

// GetLineAccessToken mocks base method.
func (m *MockLineConfig) GetLineAccessToken(code, redirectURI string) (*config.LineTokenResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLineAccessToken", code, redirectURI)
	ret0, _ := ret[0].(*config.LineTokenResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLineAccessToken indicates an expected call of GetLineAccessToken.
func (mr *MockLineConfigMockRecorder) GetLineAccessToken(code, redirectURI interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLineAccessToken", reflect.TypeOf((*MockLineConfig)(nil).GetLineAccessToken), code, redirectURI)
}

// GetLineUserInfo mocks base method.
func (m *MockLineConfig) GetLineUserInfo(accessToken string) (*config.LineUserInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLineUserInfo", accessToken)
	ret0, _ := ret[0].(*config.LineUserInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLineUserInfo indicates an expected call of GetLineUserInfo.
func (mr *MockLineConfigMockRecorder) GetLineUserInfo(accessToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLineUserInfo", reflect.TypeOf((*MockLineConfig)(nil).GetLineUserInfo), accessToken)
}

// LineAuthURL mocks base method.
func (m *MockLineConfig) LineAuthURL(RedirectURI string) (string, string) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LineAuthURL", RedirectURI)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	return ret0, ret1
}

// LineAuthURL indicates an expected call of LineAuthURL.
func (mr *MockLineConfigMockRecorder) LineAuthURL(RedirectURI interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LineAuthURL", reflect.TypeOf((*MockLineConfig)(nil).LineAuthURL), RedirectURI)
}

// RevokeLineAccessToken mocks base method.
func (m *MockLineConfig) RevokeLineAccessToken(accessToken string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RevokeLineAccessToken", accessToken)
	ret0, _ := ret[0].(error)
	return ret0
}

// RevokeLineAccessToken indicates an expected call of RevokeLineAccessToken.
func (mr *MockLineConfigMockRecorder) RevokeLineAccessToken(accessToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevokeLineAccessToken", reflect.TypeOf((*MockLineConfig)(nil).RevokeLineAccessToken), accessToken)
}
