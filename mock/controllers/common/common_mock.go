// Code generated by MockGen. DO NOT EDIT.
// Source: ./controllers/common/common.go

// Package mock_common is a generated GoMock package.
package mock_common

import (
	http "net/http"
	reflect "reflect"
	config "server/config"
	common "server/controllers/common"
	utils "server/utils"

	gin "github.com/gin-gonic/gin"
	gomock "github.com/golang/mock/gomock"
)

// MockControllersCommonService is a mock of ControllersCommonService interface.
type MockControllersCommonService struct {
	ctrl     *gomock.Controller
	recorder *MockControllersCommonServiceMockRecorder
}

// MockControllersCommonServiceMockRecorder is the mock recorder for MockControllersCommonService.
type MockControllersCommonServiceMockRecorder struct {
	mock *MockControllersCommonService
}

// NewMockControllersCommonService creates a new mock instance.
func NewMockControllersCommonService(ctrl *gomock.Controller) *MockControllersCommonService {
	mock := &MockControllersCommonService{ctrl: ctrl}
	mock.recorder = &MockControllersCommonServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockControllersCommonService) EXPECT() *MockControllersCommonServiceMockRecorder {
	return m.recorder
}

// GetRevoke mocks base method.
func (m *MockControllersCommonService) GetRevoke(client *http.Client, url, AccessToken string) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRevoke", client, url, AccessToken)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRevoke indicates an expected call of GetRevoke.
func (mr *MockControllersCommonServiceMockRecorder) GetRevoke(client, url, AccessToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRevoke", reflect.TypeOf((*MockControllersCommonService)(nil).GetRevoke), client, url, AccessToken)
}

// GoogleAuthCommon mocks base method.
func (m *MockControllersCommonService) GoogleAuthCommon(c *gin.Context, params common.GooglePrams) (int, common.GoogleUserInfo, utils.ErrorResponse) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GoogleAuthCommon", c, params)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(common.GoogleUserInfo)
	ret2, _ := ret[2].(utils.ErrorResponse)
	return ret0, ret1, ret2
}

// GoogleAuthCommon indicates an expected call of GoogleAuthCommon.
func (mr *MockControllersCommonServiceMockRecorder) GoogleAuthCommon(c, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GoogleAuthCommon", reflect.TypeOf((*MockControllersCommonService)(nil).GoogleAuthCommon), c, params)
}

// LineAuthCommon mocks base method.
func (m *MockControllersCommonService) LineAuthCommon(c *gin.Context, params common.LinePrams) (int, *config.LineUserInfo, utils.ErrorResponse) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LineAuthCommon", c, params)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(*config.LineUserInfo)
	ret2, _ := ret[2].(utils.ErrorResponse)
	return ret0, ret1, ret2
}

// LineAuthCommon indicates an expected call of LineAuthCommon.
func (mr *MockControllersCommonServiceMockRecorder) LineAuthCommon(c, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LineAuthCommon", reflect.TypeOf((*MockControllersCommonService)(nil).LineAuthCommon), c, params)
}

// RedirectSignIn mocks base method.
func (m *MockControllersCommonService) RedirectSignIn(UserId int, UserName string, flag bool) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RedirectSignIn", UserId, UserName, flag)
	ret0, _ := ret[0].(string)
	return ret0
}

// RedirectSignIn indicates an expected call of RedirectSignIn.
func (mr *MockControllersCommonServiceMockRecorder) RedirectSignIn(UserId, UserName, flag interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RedirectSignIn", reflect.TypeOf((*MockControllersCommonService)(nil).RedirectSignIn), UserId, UserName, flag)
}
