// Code generated by MockGen. DO NOT EDIT.
// Source: ./controllers/sing_controllers.go

// Package mock_controllers is a generated GoMock package.
package mock_controllers

import (
	reflect "reflect"

	gin "github.com/gin-gonic/gin"
	gomock "github.com/golang/mock/gomock"
)

// MockSingDataFetcher is a mock of SingDataFetcher interface.
type MockSingDataFetcher struct {
	ctrl     *gomock.Controller
	recorder *MockSingDataFetcherMockRecorder
}

// MockSingDataFetcherMockRecorder is the mock recorder for MockSingDataFetcher.
type MockSingDataFetcherMockRecorder struct {
	mock *MockSingDataFetcher
}

// NewMockSingDataFetcher creates a new mock instance.
func NewMockSingDataFetcher(ctrl *gomock.Controller) *MockSingDataFetcher {
	mock := &MockSingDataFetcher{ctrl: ctrl}
	mock.recorder = &MockSingDataFetcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSingDataFetcher) EXPECT() *MockSingDataFetcherMockRecorder {
	return m.recorder
}

// DeleteSingInApi mocks base method.
func (m *MockSingDataFetcher) DeleteSingInApi(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DeleteSingInApi", c)
}

// DeleteSingInApi indicates an expected call of DeleteSingInApi.
func (mr *MockSingDataFetcherMockRecorder) DeleteSingInApi(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSingInApi", reflect.TypeOf((*MockSingDataFetcher)(nil).DeleteSingInApi), c)
}

// GetRefreshTokenApi mocks base method.
func (m *MockSingDataFetcher) GetRefreshTokenApi(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "GetRefreshTokenApi", c)
}

// GetRefreshTokenApi indicates an expected call of GetRefreshTokenApi.
func (mr *MockSingDataFetcherMockRecorder) GetRefreshTokenApi(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRefreshTokenApi", reflect.TypeOf((*MockSingDataFetcher)(nil).GetRefreshTokenApi), c)
}

// PostSingInApi mocks base method.
func (m *MockSingDataFetcher) PostSingInApi(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "PostSingInApi", c)
}

// PostSingInApi indicates an expected call of PostSingInApi.
func (mr *MockSingDataFetcherMockRecorder) PostSingInApi(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostSingInApi", reflect.TypeOf((*MockSingDataFetcher)(nil).PostSingInApi), c)
}

// PostSingUpApi mocks base method.
func (m *MockSingDataFetcher) PostSingUpApi(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "PostSingUpApi", c)
}

// PostSingUpApi indicates an expected call of PostSingUpApi.
func (mr *MockSingDataFetcherMockRecorder) PostSingUpApi(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostSingUpApi", reflect.TypeOf((*MockSingDataFetcher)(nil).PostSingUpApi), c)
}

// PutSingInEditApi mocks base method.
func (m *MockSingDataFetcher) PutSingInEditApi(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "PutSingInEditApi", c)
}

// PutSingInEditApi indicates an expected call of PutSingInEditApi.
func (mr *MockSingDataFetcherMockRecorder) PutSingInEditApi(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutSingInEditApi", reflect.TypeOf((*MockSingDataFetcher)(nil).PutSingInEditApi), c)
}
