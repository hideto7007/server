// Code generated by MockGen. DO NOT EDIT.
// Source: ./controllers/sign_controllers.go

// Package mock_controllers is a generated GoMock package.
package mock_controllers

import (
	reflect "reflect"

	gin "github.com/gin-gonic/gin"
	gomock "github.com/golang/mock/gomock"
)

// MockSignDataFetcher is a mock of SignDataFetcher interface.
type MockSignDataFetcher struct {
	ctrl     *gomock.Controller
	recorder *MockSignDataFetcherMockRecorder
}

// MockSignDataFetcherMockRecorder is the mock recorder for MockSignDataFetcher.
type MockSignDataFetcherMockRecorder struct {
	mock *MockSignDataFetcher
}

// NewMockSignDataFetcher creates a new mock instance.
func NewMockSignDataFetcher(ctrl *gomock.Controller) *MockSignDataFetcher {
	mock := &MockSignDataFetcher{ctrl: ctrl}
	mock.recorder = &MockSignDataFetcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSignDataFetcher) EXPECT() *MockSignDataFetcherMockRecorder {
	return m.recorder
}

// DeleteSignInApi mocks base method.
func (m *MockSignDataFetcher) DeleteSignInApi(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DeleteSignInApi", c)
}

// DeleteSignInApi indicates an expected call of DeleteSignInApi.
func (mr *MockSignDataFetcherMockRecorder) DeleteSignInApi(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSignInApi", reflect.TypeOf((*MockSignDataFetcher)(nil).DeleteSignInApi), c)
}

// GetRefreshTokenApi mocks base method.
func (m *MockSignDataFetcher) GetRefreshTokenApi(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "GetRefreshTokenApi", c)
}

// GetRefreshTokenApi indicates an expected call of GetRefreshTokenApi.
func (mr *MockSignDataFetcherMockRecorder) GetRefreshTokenApi(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRefreshTokenApi", reflect.TypeOf((*MockSignDataFetcher)(nil).GetRefreshTokenApi), c)
}

// PostSignInApi mocks base method.
func (m *MockSignDataFetcher) PostSignInApi(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "PostSignInApi", c)
}

// PostSignInApi indicates an expected call of PostSignInApi.
func (mr *MockSignDataFetcherMockRecorder) PostSignInApi(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostSignInApi", reflect.TypeOf((*MockSignDataFetcher)(nil).PostSignInApi), c)
}

// PostSignUpApi mocks base method.
func (m *MockSignDataFetcher) PostSignUpApi(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "PostSignUpApi", c)
}

// PostSignUpApi indicates an expected call of PostSignUpApi.
func (mr *MockSignDataFetcherMockRecorder) PostSignUpApi(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostSignUpApi", reflect.TypeOf((*MockSignDataFetcher)(nil).PostSignUpApi), c)
}

// PutSignInEditApi mocks base method.
func (m *MockSignDataFetcher) PutSignInEditApi(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "PutSignInEditApi", c)
}

// PutSignInEditApi indicates an expected call of PutSignInEditApi.
func (mr *MockSignDataFetcherMockRecorder) PutSignInEditApi(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutSignInEditApi", reflect.TypeOf((*MockSignDataFetcher)(nil).PutSignInEditApi), c)
}
