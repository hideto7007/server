// Code generated by MockGen. DO NOT EDIT.
// Source: ./common/common.go

// Package mock_common is a generated GoMock package.
package mock_common

import (
	reflect "reflect"
	time "time"

	gin "github.com/gin-gonic/gin"
	gomock "github.com/golang/mock/gomock"
)

// MockCommonFetcher is a mock of CommonFetcher interface.
type MockCommonFetcher struct {
	ctrl     *gomock.Controller
	recorder *MockCommonFetcherMockRecorder
}

// MockCommonFetcherMockRecorder is the mock recorder for MockCommonFetcher.
type MockCommonFetcherMockRecorder struct {
	mock *MockCommonFetcher
}

// NewMockCommonFetcher creates a new mock instance.
func NewMockCommonFetcher(ctrl *gomock.Controller) *MockCommonFetcher {
	mock := &MockCommonFetcher{ctrl: ctrl}
	mock.recorder = &MockCommonFetcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCommonFetcher) EXPECT() *MockCommonFetcherMockRecorder {
	return m.recorder
}

// IntgetPrameter mocks base method.
func (m *MockCommonFetcher) IntgetPrameter(c *gin.Context, prams ...string) (map[string]int, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{c}
	for _, a := range prams {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "IntgetPrameter", varargs...)
	ret0, _ := ret[0].(map[string]int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IntgetPrameter indicates an expected call of IntgetPrameter.
func (mr *MockCommonFetcherMockRecorder) IntgetPrameter(c interface{}, prams ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{c}, prams...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IntgetPrameter", reflect.TypeOf((*MockCommonFetcher)(nil).IntgetPrameter), varargs...)
}

// StrToInt mocks base method.
func (m *MockCommonFetcher) StrToInt(str string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StrToInt", str)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StrToInt indicates an expected call of StrToInt.
func (mr *MockCommonFetcherMockRecorder) StrToInt(str interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StrToInt", reflect.TypeOf((*MockCommonFetcher)(nil).StrToInt), str)
}

// StrToTime mocks base method.
func (m *MockCommonFetcher) StrToTime(dateStr string) (time.Time, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StrToTime", dateStr)
	ret0, _ := ret[0].(time.Time)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StrToTime indicates an expected call of StrToTime.
func (mr *MockCommonFetcherMockRecorder) StrToTime(dateStr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StrToTime", reflect.TypeOf((*MockCommonFetcher)(nil).StrToTime), dateStr)
}

// TimeToStr mocks base method.
func (m *MockCommonFetcher) TimeToStr(t time.Time) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TimeToStr", t)
	ret0, _ := ret[0].(string)
	return ret0
}

// TimeToStr indicates an expected call of TimeToStr.
func (mr *MockCommonFetcherMockRecorder) TimeToStr(t interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TimeToStr", reflect.TypeOf((*MockCommonFetcher)(nil).TimeToStr), t)
}
