// Code generated by MockGen. DO NOT EDIT.
// Source: ./common/http.go

// Package mock_common is a generated GoMock package.
package mock_common

import (
	io "io"
	http "net/http"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockHttpService is a mock of HttpService interface.
type MockHttpService struct {
	ctrl     *gomock.Controller
	recorder *MockHttpServiceMockRecorder
}

// MockHttpServiceMockRecorder is the mock recorder for MockHttpService.
type MockHttpServiceMockRecorder struct {
	mock *MockHttpService
}

// NewMockHttpService creates a new mock instance.
func NewMockHttpService(ctrl *gomock.Controller) *MockHttpService {
	mock := &MockHttpService{ctrl: ctrl}
	mock.recorder = &MockHttpServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHttpService) EXPECT() *MockHttpServiceMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockHttpService) Delete(url string, headers map[string]string) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", url, headers)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockHttpServiceMockRecorder) Delete(url, headers interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockHttpService)(nil).Delete), url, headers)
}

// Get mocks base method.
func (m *MockHttpService) Get(url string, headers map[string]string) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", url, headers)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockHttpServiceMockRecorder) Get(url, headers interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockHttpService)(nil).Get), url, headers)
}

// Post mocks base method.
func (m *MockHttpService) Post(url string, headers map[string]string, body []byte) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Post", url, headers, body)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Post indicates an expected call of Post.
func (mr *MockHttpServiceMockRecorder) Post(url, headers, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Post", reflect.TypeOf((*MockHttpService)(nil).Post), url, headers, body)
}

// Put mocks base method.
func (m *MockHttpService) Put(url string, headers map[string]string, body []byte) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Put", url, headers, body)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Put indicates an expected call of Put.
func (mr *MockHttpServiceMockRecorder) Put(url, headers, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockHttpService)(nil).Put), url, headers, body)
}

// Request mocks base method.
func (m *MockHttpService) Request(method, url string, headers map[string]string, body io.Reader) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Request", method, url, headers, body)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Request indicates an expected call of Request.
func (mr *MockHttpServiceMockRecorder) Request(method, url, headers, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Request", reflect.TypeOf((*MockHttpService)(nil).Request), method, url, headers, body)
}
