// Code generated by MockGen. DO NOT EDIT.
// Source: ./models/sign.go

// Package mock_models is a generated GoMock package.
package mock_models

import (
	reflect "reflect"
	models "server/models"

	gomock "github.com/golang/mock/gomock"
)

// MockSignInFetcher is a mock of SignInFetcher interface.
type MockSignInFetcher struct {
	ctrl     *gomock.Controller
	recorder *MockSignInFetcherMockRecorder
}

// MockSignInFetcherMockRecorder is the mock recorder for MockSignInFetcher.
type MockSignInFetcherMockRecorder struct {
	mock *MockSignInFetcher
}

// NewMockSignInFetcher creates a new mock instance.
func NewMockSignInFetcher(ctrl *gomock.Controller) *MockSignInFetcher {
	mock := &MockSignInFetcher{ctrl: ctrl}
	mock.recorder = &MockSignInFetcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSignInFetcher) EXPECT() *MockSignInFetcherMockRecorder {
	return m.recorder
}

// DeleteSignIn mocks base method.
func (m *MockSignInFetcher) DeleteSignIn(data models.RequestSignInDeleteData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSignIn", data)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSignIn indicates an expected call of DeleteSignIn.
func (mr *MockSignInFetcherMockRecorder) DeleteSignIn(data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSignIn", reflect.TypeOf((*MockSignInFetcher)(nil).DeleteSignIn), data)
}

// GetSignIn mocks base method.
func (m *MockSignInFetcher) GetSignIn(data models.RequestSignInData) (models.SignInData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSignIn", data)
	ret0, _ := ret[0].(models.SignInData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSignIn indicates an expected call of GetSignIn.
func (mr *MockSignInFetcherMockRecorder) GetSignIn(data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSignIn", reflect.TypeOf((*MockSignInFetcher)(nil).GetSignIn), data)
}

// PostSignUp mocks base method.
func (m *MockSignInFetcher) PostSignUp(data models.RequestSignUpData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PostSignUp", data)
	ret0, _ := ret[0].(error)
	return ret0
}

// PostSignUp indicates an expected call of PostSignUp.
func (mr *MockSignInFetcherMockRecorder) PostSignUp(data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostSignUp", reflect.TypeOf((*MockSignInFetcher)(nil).PostSignUp), data)
}

// PutCheck mocks base method.
func (m *MockSignInFetcher) PutCheck(data models.RequestSignInEditData) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutCheck", data)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutCheck indicates an expected call of PutCheck.
func (mr *MockSignInFetcherMockRecorder) PutCheck(data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutCheck", reflect.TypeOf((*MockSignInFetcher)(nil).PutCheck), data)
}

// PutSignInEdit mocks base method.
func (m *MockSignInFetcher) PutSignInEdit(data models.RequestSignInEditData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutSignInEdit", data)
	ret0, _ := ret[0].(error)
	return ret0
}

// PutSignInEdit indicates an expected call of PutSignInEdit.
func (mr *MockSignInFetcherMockRecorder) PutSignInEdit(data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutSignInEdit", reflect.TypeOf((*MockSignInFetcher)(nil).PutSignInEdit), data)
}
