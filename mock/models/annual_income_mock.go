// Code generated by MockGen. DO NOT EDIT.
// Source: ./models/annual_income.go

// Package mock_models is a generated GoMock package.
package mock_models

import (
	reflect "reflect"
	models "server/models"

	gomock "github.com/golang/mock/gomock"
)

// MockAnuualIncomeFetcher is a mock of AnuualIncomeFetcher interface.
type MockAnuualIncomeFetcher struct {
	ctrl     *gomock.Controller
	recorder *MockAnuualIncomeFetcherMockRecorder
}

// MockAnuualIncomeFetcherMockRecorder is the mock recorder for MockAnuualIncomeFetcher.
type MockAnuualIncomeFetcherMockRecorder struct {
	mock *MockAnuualIncomeFetcher
}

// NewMockAnuualIncomeFetcher creates a new mock instance.
func NewMockAnuualIncomeFetcher(ctrl *gomock.Controller) *MockAnuualIncomeFetcher {
	mock := &MockAnuualIncomeFetcher{ctrl: ctrl}
	mock.recorder = &MockAnuualIncomeFetcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAnuualIncomeFetcher) EXPECT() *MockAnuualIncomeFetcherMockRecorder {
	return m.recorder
}

// DeleteIncome mocks base method.
func (m *MockAnuualIncomeFetcher) DeleteIncome(UserID []models.DeleteIncomeData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteIncome", UserID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteIncome indicates an expected call of DeleteIncome.
func (mr *MockAnuualIncomeFetcherMockRecorder) DeleteIncome(UserID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteIncome", reflect.TypeOf((*MockAnuualIncomeFetcher)(nil).DeleteIncome), UserID)
}

// GetDateRange mocks base method.
func (m *MockAnuualIncomeFetcher) GetDateRange(UserID string) ([]models.PaymentDate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDateRange", UserID)
	ret0, _ := ret[0].([]models.PaymentDate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDateRange indicates an expected call of GetDateRange.
func (mr *MockAnuualIncomeFetcherMockRecorder) GetDateRange(UserID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDateRange", reflect.TypeOf((*MockAnuualIncomeFetcher)(nil).GetDateRange), UserID)
}

// GetIncomeDataInRange mocks base method.
func (m *MockAnuualIncomeFetcher) GetIncomeDataInRange(StartDate, EndDate, UserId string) ([]models.IncomeData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIncomeDataInRange", StartDate, EndDate, UserId)
	ret0, _ := ret[0].([]models.IncomeData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIncomeDataInRange indicates an expected call of GetIncomeDataInRange.
func (mr *MockAnuualIncomeFetcherMockRecorder) GetIncomeDataInRange(StartDate, EndDate, UserId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIncomeDataInRange", reflect.TypeOf((*MockAnuualIncomeFetcher)(nil).GetIncomeDataInRange), StartDate, EndDate, UserId)
}

// GetYearsIncomeAndDeduction mocks base method.
func (m *MockAnuualIncomeFetcher) GetYearsIncomeAndDeduction(UserID string) ([]models.YearsIncomeData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetYearsIncomeAndDeduction", UserID)
	ret0, _ := ret[0].([]models.YearsIncomeData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetYearsIncomeAndDeduction indicates an expected call of GetYearsIncomeAndDeduction.
func (mr *MockAnuualIncomeFetcherMockRecorder) GetYearsIncomeAndDeduction(UserID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetYearsIncomeAndDeduction", reflect.TypeOf((*MockAnuualIncomeFetcher)(nil).GetYearsIncomeAndDeduction), UserID)
}

// InsertIncome mocks base method.
func (m *MockAnuualIncomeFetcher) InsertIncome(data []models.InsertIncomeData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertIncome", data)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertIncome indicates an expected call of InsertIncome.
func (mr *MockAnuualIncomeFetcherMockRecorder) InsertIncome(data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertIncome", reflect.TypeOf((*MockAnuualIncomeFetcher)(nil).InsertIncome), data)
}

// UpdateIncome mocks base method.
func (m *MockAnuualIncomeFetcher) UpdateIncome(data []models.UpdateIncomeData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateIncome", data)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateIncome indicates an expected call of UpdateIncome.
func (mr *MockAnuualIncomeFetcherMockRecorder) UpdateIncome(data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateIncome", reflect.TypeOf((*MockAnuualIncomeFetcher)(nil).UpdateIncome), data)
}
